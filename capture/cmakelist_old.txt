cmake_minimum_required(VERSION 3.5)
project(px4_ros_com)

# Default to C99
if(NOT CMAKE_C_STANDARD)
	set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
	set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(builtin_interfaces REQUIRED)
find_package(eigen3_cmake_module REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(px4_msgs REQUIRED)
find_package(rclcpp REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(casadi REQUIRED)
find_package(ament_index_cpp REQUIRED)

#set(CasADi_DIR "/home/ricardo/casadi/casadi-linux-py35-v3.5.5-64bit/casadi/cmake")


# Include CasADi
find_library(CASADI_LIBRARY casadi PATHS /usr/local/lib /usr/lib)
find_path(CASADI_INCLUDE_DIR casadi PATHS /usr/local/include /usr/include)

#################
# Setup targets #
#################

#include_directories(include)

#include_directories(/home/ricardo/casadi/casadi-linux-py35-v3.5.5-64bit/casadi)
#link_directories(/home/ricardo/casadi/casadi-linux-py35-v3.5.5-64bit/casadi)

#include_directories(
 # include
  #${rclcpp_INCLUDE_DIRS}
 # ${std_msgs_INCLUDE_DIRS}
 # ${CASADI_INCLUDE_DIR}
#)

include_directories(
  include
  ${px4_ros_com_INCLUDE_DIRS}
  ${ament_index_cpp_INCLUDE_DIRS}
  ${CASADI_INCLUDE_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/include
)

#target_link_libraries(${PROJECT_NAME} ${CasADi_LIBRARIES})

link_directories(${CMAKE_CURRENT_SOURCE_DIR}/install/px4_ros_com/share/px4_ros_com/include)


# Add frame_transforms lib
add_library(frame_transforms SHARED src/lib/frame_transforms.cpp)
add_library(gen SHARED src/gen.cpp)
ament_target_dependencies(frame_transforms Eigen3 geometry_msgs sensor_msgs)
target_include_directories(frame_transforms PUBLIC
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}>
	$<INSTALL_INTERFACE:include/${PROJECT_NAME}>
)




set_target_properties(gen PROPERTIES
  IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/include/gen.so
)

# examples/listeners/sensor_combined_listener
add_executable(sensor_combined_listener src/examples/listeners/sensor_combined_listener.cpp)
ament_target_dependencies(sensor_combined_listener rclcpp px4_msgs)
install(TARGETS sensor_combined_listener DESTINATION lib/${PROJECT_NAME})

# examples/listeners/vehicle_gps_position_listener
add_executable(vehicle_gps_position_listener src/examples/listeners/vehicle_gps_position_listener.cpp)
ament_target_dependencies(vehicle_gps_position_listener rclcpp px4_msgs)
install(TARGETS vehicle_gps_position_listener DESTINATION lib/${PROJECT_NAME})

# examples/advertisers/debug_vect_advertiser
add_executable(debug_vect_advertiser src/examples/advertisers/debug_vect_advertiser.cpp)
ament_target_dependencies(debug_vect_advertiser rclcpp px4_msgs)
install(TARGETS debug_vect_advertiser DESTINATION lib/${PROJECT_NAME})

# examples/offboard/offboard_control
add_executable(offboard_control src/examples/offboard/offboard_control.cpp)
ament_target_dependencies(offboard_control rclcpp px4_msgs)
install(TARGETS offboard_control DESTINATION lib/${PROJECT_NAME})

add_executable(quadrado_posicao src/examples/offboard/quadrado_posicao.cpp)
ament_target_dependencies(quadrado_posicao rclcpp px4_msgs)
install(TARGETS quadrado_posicao DESTINATION lib/${PROJECT_NAME})

add_executable(quadrado_velocidade src/examples/offboard/quadrado_velocidade.cpp)
ament_target_dependencies(quadrado_velocidade rclcpp px4_msgs)
install(TARGETS quadrado_velocidade DESTINATION lib/${PROJECT_NAME})

add_executable(acel src/examples/offboard/acel.cpp)
ament_target_dependencies(acel rclcpp px4_msgs)
install(TARGETS acel DESTINATION lib/${PROJECT_NAME})

add_executable(quadrado_acel src/examples/offboard/quadrado_acel.cpp)
ament_target_dependencies(quadrado_acel rclcpp px4_msgs)
install(TARGETS quadrado_acel DESTINATION lib/${PROJECT_NAME})

add_executable(circulo_acel src/examples/offboard/circulo_acel.cpp)
ament_target_dependencies(circulo_acel rclcpp px4_msgs)
install(TARGETS circulo_acel DESTINATION lib/${PROJECT_NAME})

add_executable(follow src/examples/offboard/follow.cpp)
ament_target_dependencies(follow rclcpp px4_msgs)
install(TARGETS follow DESTINATION lib/${PROJECT_NAME})

add_executable(follow_mpc src/examples/offboard/follow_mpc.cpp)
ament_target_dependencies(follow_mpc rclcpp px4_msgs)
target_link_libraries(follow_mpc ${catkin_LIBRARIES} ${CASADI_LIBRARY} gen)
install(TARGETS follow_mpc gen DESTINATION lib/${PROJECT_NAME})


add_executable(mpc_library_gen src/mpc_library_gen.cpp)
ament_target_dependencies(mpc_library_gen rclcpp ament_index_cpp)
install(TARGETS mpc_library_gen DESTINATION lib/${PROJECT_NAME})

target_link_libraries(follow_mpc 
  ${catkin_LIBRARIES}
  ${CASADI_LIBRARY}
  ament_index_cpp::ament_index_cpp
)
# Ensure the gen.so library is available
#set(GEN_SO_DIR "/home/ricardo/ws_offboard_control/install/px4_ros_com/share/px4_ros_com/include")


#set(GEN_SO_PATH "${GEN_SO_DIR}/gen.so")

# Check if the gen.so file exists
#if(NOT EXISTS ${GEN_SO_PATH})
  #message(FATAL_ERROR "The shared library gen.so was not found at ${GEN_SO_PATH}")
#endif()

# Find the Casadi library (you might need to adjust this to match your system configuration)
#find_library(CASADI_LIB casadi HINTS /usr/local/lib /opt/casadi/lib)

# Check if the Casadi library is found
#if(NOT CASADI_LIB)
 # message(FATAL_ERROR "The Casadi library was not found. Make sure it is installed and the path is correct.")
#endif()

# Link the shared library
#target_link_libraries(follow_mpc
  #${rclcpp_LIBRARIES}
  #${std_msgs_LIBRARIES}
 # ${GEN_SO_PATH}
 # ${CASADI_LIB}
#)


############
# Install ##
############

# Export information to downstream packages
ament_export_dependencies(ament_cmake rclcpp rosidl_default_runtime eigen3_cmake_module Eigen3 px4_msgs geometry_msgs sensor_msgs)

ament_export_targets(export_frame_transforms HAS_LIBRARY_TARGET)

ament_export_include_directories(include)
ament_export_libraries(frame_transforms)

# Install header files
install(DIRECTORY include/${PROJECT_NAME}/ DESTINATION include/${PROJECT_NAME})

install(TARGETS frame_transforms follow_mpc gen
	EXPORT export_frame_transforms
	ARCHIVE DESTINATION lib
	LIBRARY DESTINATION lib
	RUNTIME DESTINATION bin
	INCLUDES DESTINATION include
)

#install(FILES 
#${GEN_SO_PATH}
#DESTINATION lib/${PROJECT_NAME}
#)

#ament_export_libraries(gen)

# Install launch files.
install(DIRECTORY launch DESTINATION share/${PROJECT_NAME}/)

# Install tests
install(DIRECTORY test DESTINATION share/${PROJECT_NAME}/)

install(DIRECTORY include/
  DESTINATION include
)

############
# Testing ##
############

if(BUILD_TESTING)
	find_package(ament_lint_auto REQUIRED)
	# the following line skips the linter which checks for copyrights
	# uncomment the line when a copyright and license is not present in all source files
	#set(ament_cmake_copyright_FOUND TRUE)
	# the following line skips cpplint (only works in a git repo)
	# uncomment the line when this package is not in a git repo
	#set(ament_cmake_cpplint_FOUND TRUE)
	ament_lint_auto_find_test_dependencies()
endif()

ament_package()
